<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: accessibility | Instructure Tech Blog]]></title>
  <link href="http://instructure.github.io/blog/categories/accessibility/atom.xml" rel="self"/>
  <link href="http://instructure.github.io/"/>
  <updated>2021-06-02T13:06:34-05:00</updated>
  <id>http://instructure.github.io/</id>
  <author>
    <name><![CDATA[Instructure]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Breaking the Rules: Accessible Dialog Components]]></title>
    <link href="http://instructure.github.io/blog/2014/09/25/accessible-dialogs/"/>
    <updated>2014-09-25T09:00:00-05:00</updated>
    <id>http://instructure.github.io/blog/2014/09/25/accessible-dialogs</id>
    <content type="html"><![CDATA[<p>Turns out, <code>role="dialog"</code> isn&rsquo;t your friend.</p>

<h2>Cursor Modes</h2>

<p>When you first start building accessible websites, you learn quickly
that there are different cursor modes when using Windows screen readers,
<a href="http://tink.co.uk/2014/09/understanding-screen-reader-interaction-modes/">LÃ©onie Watson explains them well here</a>.</p>

<p>Certain element roles, like <code>application</code> and <code>dialog</code> will change the
mode of the cursor. Very often this is not what you want. Yes, It does
allow the developer to implement convenient keyboard events for the
component, but it disables the normal keyboard navigation shortcuts for
screen reader users. For sighted users, that would be a lot like opening
your page up in Internet Explorer 5.5 on a mac.</p>

<!--more-->


<h2>The Problem With ARIA Dialogs</h2>

<p>Unlike other components, dialogs and modals usually just contain regular
content like the rest of the website. They don&rsquo;t need special keyboard
navigation implementations, except for handling the escape key to
request to close it.</p>

<p>When you use <code>role="dialog"</code> the forms/focus cursor mode is activated
and the screen reader user can&rsquo;t interact with the content in the dialog
like they can with the rest of the website. In most cases, this results
in much of the content in the dialog becoming completely inaccessible to
them.</p>

<h2>The Solution</h2>

<p>The solution is to &ldquo;hide&rdquo; everything in the application&mdash;except the
dialog&mdash;from the screen reader. This way the dialog can be navigated
normally and the rest of the app is inaccessible until the dialog closes.</p>

<p>In a nutshell:</p>

<ol>
<li>Don&rsquo;t use <code>role="dialog"</code>, to avoid switching cursor modes.</li>
<li>When a dialog opens, set <code>aria-hidden="true"</code> on the rest of the
page and focus the content of the modal.</li>
<li>When a dialog closes, remove the <code>aria-hidden</code> attribute and return
focus to the element that initiated it.</li>
</ol>


<p>The easiest thing to do is simply wrap your entire website in a
containing element and then just manage <code>aria-hidden</code> on that one
element instead of many.</p>

<p>It would end up looking something like this:</p>

<p>```html</p>

<div id="app"> ... </div>


<div class="dialog"> ... </div>


<p>```</p>

<p>And when the dialog is open:</p>

<p>```html</p>

<div id="app" aria-hidden="true"> ... </div>


<div class="dialog"> ... </div>


<p>```</p>

<h2>But That&rsquo;s Not The Spec!</h2>

<p>The spec probably needs to change to support dialogs where forms mode
doesn&rsquo;t make sense. We implemented this in order to get Canvas certified
as an accessible web application. The web moves fast and the specs don&rsquo;t
always keep up.</p>

<p>Until the specs catch up, and all the parties involved implement them,
we choose to focus on the experience of our users (oh, right, and
<a href="http://webaim.org/services/certification/">getting certified</a>).</p>

<p><div class="about-box">
  <img src="http://www.gravatar.com/avatar/749001c9fe6927c4b069a45c2a3d68f7?s=100" class="avatar" align="left" />
  <p>
    Ryan Florence heads up the Web Frameworks team at Instructure where
    they chase both squirrels and JavaScript frameworks, inviting the
    rest of the team to join them. Follow his adventures on 
    <a href="https://github.com/rpflorence">Github</a> and 
    <a href="http://twitter.com/ryanflorence">Twitter</a>.
  </p>
</div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Approaching Accessibility Testing]]></title>
    <link href="http://instructure.github.io/blog/2014/06/17/approaching-accessibility-testing/"/>
    <updated>2014-06-17T16:37:00-05:00</updated>
    <id>http://instructure.github.io/blog/2014/06/17/approaching-accessibility-testing</id>
    <content type="html"><![CDATA[<p>When I first started learning about accessibility, I had no idea what I was doing. I am a sighted person, and didn&rsquo;t know if what I was doing was correct. I fed a URL to an online accessibility evaluator, which then told me what elements were missing on the page (ie: an image did not have an alt tag). It wasn&rsquo;t until I met a blind person that I started to understand how people with visual impairments actually use the web. Over the years, I picked up a lot of insight on how to conduct accessibility testing, which I want to share with you.</p>

<p> <!--more--></p>

<p>Before I dive into the &ldquo;tips and tricks&rdquo;, I have to dispell a few myths:</p>

<h2>Accessibility Myths</h2>

<h3>Accessibility only affects blind people</h3>

<p>Blind people are not the only ones affected by inaccessible websites; they affect people with motor impairments, color blindness, or cognitive impairments, amongst others. Accessibility testing is necessary because we as human beings should all have access to the web. If you or your company is not doing accessibility testing, bring it up at the next meeting.</p>

<h3>Assistive technology is super cheap</h3>

<p>Many people rely on screenreading software or a braille display, and it can get very expensive. The license for JAWS, a popular screenreading software, costs anywhere from $895 USD to $1,095 USD, and another couple hundred dollars if you want to buy the upgrade that comes out once each year. Choosing to skip an upgrade may mean that the latest version of your web browser may not work well, or at all. A braille display, which is a device that displays braille using pins that move up and down (a necessity if you are deafblind), can cost thousands of dollars. And this is only for your computer &ndash; you have to pay more money on top of that for your mobile devices. Imagine if you had to pay for all that, and it only worked part of the time. It&rsquo;s like buying a car that only runs on Tuesdays.</p>

<h3>Assistive technology is always up to date</h3>

<p>Technology changes so fast that, when we buy the newest smartphone, it becomes outdated months later. In the same way, assistive technology is often behind new web technologies. Screenreaders can&rsquo;t keep up with the fast pace of web development, which includes new features every other week.</p>

<h3>All screenreaders are the same, I only have to test with one</h3>

<p>Like browsers, not all screenreading software is alike. Mac OS X has a built in screenreader called &ldquo;VoiceOver&rdquo;, which you can enable in the Accessibility section of your System Preferences. It also includes a comprehensive guided tutorial. For Windows, two popular options are JAWS and NVDA. NVDA is free and open source, and is available in many languages. For Linux users, Orca, which is also free and open source, is a great option. The screenreader output can greatly vary; when you navigate to a &ldquo;Close&rdquo; button on a modal window, you might hear &ldquo;Button Close Button&rdquo; from one, but hear &ldquo;Close Button&rdquo; from the other. Talk with your users and see what they are using, and if your budget allows, test with as many screenreaders as you can. At Instructure, we test Canvas using the latest version of VoiceOver and JAWS, and are currently evaluating NVDA.</p>

<h3>Accessibility testing is the worst kind of testing</h3>

<p>Testing of any kind can be painful, whether it be writing unit tests or doing user experience testing. Accessibility testing is also on that list, but realize the more you test, the more aware you will be when writing your code. You will start to look out for things here and there because you had to spend twenty minutes trying to navigate to a submenu in a previous commit.</p>

<h3>I can just throw my website at an accesibility evaluator and call it good</h3>

<p>An evaluator only looks at the structure of your site; it doesn&rsquo;t emulate the user experience. We all know that, sometimes, what looks good on paper doesn&rsquo;t work out in real life. The same goes for an evaluator. It will tell you if your headers are out of order, but it won&rsquo;t tell you if your navigation is terrible because you are inconsistent with what keypress you are using for a certain element. You need actual people to test your site out. Which brings me to my next point&hellip;</p>

<h3>Only blind people can do accessibility testing</h3>

<p>Anyone who learns the software or hardware can do accessibility testing. At Instructure, we have our Quality Assurance (QA) engineers do a lot of the testing, and all of them are sighted. If you have questions and would like to ask someone who is blind, there are a lot of resources out there. For those in the education sector, many universities have a disability resource center &ndash; reach out to the coordinator there, and ask for permission to get feedback. Your city or state may also have a dedicated center. We also have the Internet for a reason; use it!</p>

<h2>Where to start and how to test for accessibility</h2>

<p>If you haven&rsquo;t already, run your site through an evaluator. There are many free accessibility evaluators online, where you feed the URL into an evaluator, and it tells you how accessible the page is. Two popular evaluators are <a href="http://wave.webaim.org/" title="WAVE Evaluator">WAVE</a> and <a href="http://fae.cita.uiuc.edu/" title="FAE Evaluator">FAE</a>. If you use FAE, note that it is evaluating in accordance with the Illlinois Information Technology Accessibility Act. Not all evaluators are running against the same guidelines, so find out what it is evaluating against. Many evaluators will use the <a href="http://www.w3.org/TR/WCAG/" title="W3C Guidelines">W3C Web Content Accessibility Guidelines</a>. The evaluator will show you any errors and provide feedback. Do you have redudant title text? Are your forms labeled? These are items that will be pointed out to you, which you can easily fix.</p>

<p>Once you have your baseline, and fixed the structural elements, it&rsquo;s time to move on to testing with real people. Ask for feedback from your users and see what needs the most attention, and start there. Here are a few of the things we do:</p>

<p>1) On each page we check to see if there are headers, a main landmark, and a complementary landmark (if applicable). We also check for to see if there are any lists, forms, and tables on the page, and use the appropriate screenreader key. Many users navigate using these elements to quickly jump to content on a page. It&rsquo;s hard to scroll through an entire page, so make sure headers and landmarks are available for easy access.</p>

<p>2) We try to use the keyboard as much as possible. Keyboard navigation is critical to many users, especially those with physical disabilities. Not everyone can use a trackpad for gestures, but most everyone has a keyboard.</p>

<p>3) We heavily reference the keyboard layout and shortcuts provided by the screenreader we are using. When I first started accessibility testing, I used the tab key to go through the page. I didn&rsquo;t realize there were screenreader users and keyboard only users. If you are unsure of which keys correspond with which action, look up the keyboard layout for your respective screenreader.</p>

<p>4) We look to see if our elements have consistency; not all of the elements on our pages share the same keypress, even if they look the same visually (which, we are working on). For example, don&rsquo;t have a &ldquo;Submit&rdquo; button that reads as a link on one page, and as a button on another. Make sure your elements are all the same under the hood.</p>

<p>5) With links and buttons, we always make sure a user can read the link/button text and execute the appropriate action. Sometimes it will only read the link text and won&rsquo;t open the link. Don&rsquo;t assume something works just because you can navigate to it.</p>

<p>6) We look at a page from top to bottom, then outline all the elements in a spreadsheet. For example, under &ldquo;main body navigation&rdquo;, I would have &ldquo;Reads Assignment Title&rdquo;, &ldquo;Reads Published Button&rdquo;, and etc. Organizing and writing out all the elements and the location make it much easier for other people to read and follow your work.</p>

<p>What we do at Instructure isn&rsquo;t limited to this list; this is merely a springboard for you to start. We also conduct accessibility audits, and actively work with our clients and other vendors. Instructure is also fortunate to have a dedicated accessibility team in addition to engineers who are passionate about accessibility on each individual core team of Canvas.</p>

<p>Tackling accessibility testing may seem like a daunting task, but start with the steps outlined above. Your changes will start out small, and it may seem insignificant, but realize that every effort you make changes the web to be more accessible. Soon, you will be the one teaching others about what you&rsquo;ve learned, and how to make an accessible product. We at Canvas hope that one day, we&rsquo;ll be reading a blog post from you.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Generating Accessible Colors in JavaScript]]></title>
    <link href="http://instructure.github.io/blog/2013/12/30/generating-accessible-colors-in-javascript/"/>
    <updated>2013-12-30T14:42:00-06:00</updated>
    <id>http://instructure.github.io/blog/2013/12/30/generating-accessible-colors-in-javascript</id>
    <content type="html"><![CDATA[<p>We recently released a major upgrade to Canvas&rsquo;s calendar. Although the primary objective was adding an agenda view and other accessibility tools, we also took the opportunity to update its visual design, including the color coding that links events and calendars. We&rsquo;ve released this new color code generator as a Bower package at <a href="https://github.com/instructure/color-slicer">github/instructure/color-slicer</a>. Here&rsquo;s why we switched.</p>

<!--more-->


<h2>Objectives</h2>

<p>Our old color coding system was pretty simple: we had a list of ten hues, and we assigned them to calendars in order. The drawbacks were that colors would repeat after ten calendars and that the colors used weren&rsquo;t very appealing.</p>

<p> <img src="http://i.imgur.com/6lBEr3V.png" alt="" /></p>

<p>Another system we considered was <a href="https://github.com/instructure/canvas-lms/blob/stable/app/coffeescripts/util/contextColors.coffee">our hash-based color generator</a>, which creates a color based on an object name or ID. This would avoid repetition, but unlucky users could end up with three slightly different shades of green for their three courses.</p>

<p>For the new system, then, we had three goals:</p>

<ul>
<li>Produce colors that look nice and are accessibly readable for text.</li>
<li>Allow an unlimited number of colors without repetition.</li>
<li>Keep colors visually distinct, especially for short lists.</li>
</ul>


<h2>Text colors</h2>

<p>The simplest way to generate bright colors would be use HSV and to vary the hue while using 100% saturation and value. For text on a white background, though, this makes yellows almost invisible:</p>

<p><a href="http://jsfiddle.net/3KX8d/1/"><img src="http://i.imgur.com/kk4ntIE.png" /></a></p>

<p>Instead, we use the <a href="http://en.wikipedia.org/wiki/Lab_color_space">Lab color space</a>, which adjusts for human sensitivity to green, providing a better measurement of lightness and more evenly distributed hues. This not only looks better, but also helps users with limited vision by meeting <a href="http://webaim.org/resources/contrastchecker/">WCAG AA contrast guidelines</a>.</p>

<p><a href="http://jsfiddle.net/G9Qmm/1/"><img src="http://i.imgur.com/V5jstLt.png?1" /></a></p>

<h2>Spacing</h2>

<p>An easy way to space the colors would be to divide the hue circle by the number of calendars. We didn&rsquo;t want all of the colors to change whenever a user added a course, though; we wanted to use the same colors for the first three calendars whether there were three or thirty total. To accomplish this, we <a href="http://jsfiddle.net/UqSS3/6/">progressively divide each gap in half</a>: first we use 0Â°, then 180Â°, then 90Â°, then 270Â°, then 45Â°, and so on. This way, your first few calendars are always very visually distinct.</p>

<p>Formally, this is essentially an <a href="http://en.wikipedia.org/wiki/Online_algorithm">online</a> <a href="http://en.wikipedia.org/wiki/Thomson_problem">Thomson problem</a>. We&rsquo;re lucky to only have to solve the one-dimensional version, but the same basic idea could certainly be used to vary hue and value simultaneously if you wanted to generate many distinct colors and didn&rsquo;t care about legibility. The <a href="http://sitemason.vanderbilt.edu/page/hmbADS">spiral point heuristic</a> would probably work well&mdash;we&rsquo;d love to see someone send us a pull request.</p>

<h2>Results</h2>

<p>We&rsquo;re always refining our user experience, but we&rsquo;re happy with the look of our new colors.</p>

<p> <img src="http://i.imgur.com/GLSrwyh.png?1" alt="" /></p>

<p>We&rsquo;ve released <a href="https://github.com/instructure/color-slicer">color-slicer</a> in UMD format under an MIT license, so it should be easy to add to your projects. I hope you&rsquo;ll find it useful. My favorite part of working at Instructure&mdash;better than weekly lunch&mdash;is spending most of my time crafting code that we give back to the community. Let us know what you think.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Crafting accessible content]]></title>
    <link href="http://instructure.github.io/blog/2013/12/02/crafting-accessible-content/"/>
    <updated>2013-12-02T09:52:00-06:00</updated>
    <id>http://instructure.github.io/blog/2013/12/02/crafting-accessible-content</id>
    <content type="html"><![CDATA[<p>At Instructure, we&rsquo;re moving more and more of our app to the client with technologies like <a href="http://emberjs.com">Ember.js</a>. While it and other JavaScript frameworks have made this transition easier, they&rsquo;ve also introduced new challenges around keeping our content accessible.</p>

<p>The old advice we&rsquo;ve all heard about using semantic markup, headers, and <code>alt</code> attributes on <code>&lt;img /&gt;</code> tags is still true, but it doesn&rsquo;t address how we can best develop accessible content in a rich client application. Despite rumors to the contrary, rich content <em>can</em> be accessible if we pay attention to a few basics.</p>

<!--more-->


<h2>Getting started with accessibility</h2>

<p><blockquote><p>The Web is fundamentally designed to work for all people, whatever their hardware, software, language, culture, location, or physical or mental ability. When the Web meets this goal, it is accessible to people with a diverse range of hearing, movement, sight, and cognitive ability.</p><footer><strong>W3 <a href="http://www.w3.org/standards/webdesign/accessibility">http://www.w3.org/standards/webdesign/accessibility</a></strong></footer></blockquote></p>

<p>Let&rsquo;s start with a few definitions:</p>

<ul>
<li><strong>Accessibility</strong>: Web content is accessible when it usable by persons with disabilities. While this includes users of screen readers, it also includes persons with cognitive and other disabilities.</li>
<li><strong>WAI-ARIA</strong>: A suite of technologies designed to make rich Internet applications accessible to users with disabilities.</li>
</ul>


<p>Authoring accessible rich content most often means (1) using WAI-ARIA attributes such as <code>role</code> and <code>aria-expanded</code> to mark-up content in a machine-parseable way; (2) ensuring that all content is keyboard navigable; and (3) managing page focus.</p>

<p>So what does all of this mean when you&rsquo;re developing widgets? Let&rsquo;s take a look at an example of a button set component.</p>

<h2>Building a button set</h2>

<p>We&rsquo;re going to build an accessible <a href="http://getbootstrap.com/components/#btn-groups">button set</a> using Twitter&rsquo;s Bootstrap styles and jQuery.</p>

<p>Our button set is going to work like a filter, so users can only select one button at a time. This means it&rsquo;s like a radio button. Watch how we can use aria roles and attributes to convey that behavior to non-sighted users:</p>

<p>```html</p>

<div class="btn-group" role="radiogroup">
  <button type="button"
          class="btn btn-default active"
          role="radio"
          aria-checked="true">Open</button>
  <button type="button"
          class="btn btn-default"
          role="radio"
          aria-checked="false">Closed</button>
</div>


<p>```</p>

<p>First, notice that we didn&rsquo;t change Twitter&rsquo;s recommended button set markup &mdash; we only augmented it with the <code>role</code> attributes and an <code>aria-checked</code> attribute. The <code>role</code> attribute describes the component&rsquo;s behavior to screen readers, and <code>aria-checked</code> attribute notifies users of the current option in the same way that the <code>active</code> class does for sighted users.</p>

<p>Here&rsquo;s the JavaScript to make this happen:</p>

<p>```javascript
$.fn.buttonset = function() {
  $(this).on(&lsquo;click&rsquo;, function(e) {</p>

<pre><code>var $target = $(this);

$target.siblings()
  .removeClass('active')
  .attr('aria-checked', false);

$target
  .addClass('active')
  .attr('aria-checked', true);
</code></pre>

<p>  });
};</p>

<p>// usage
$(&lsquo;.btn-group .btn&rsquo;).buttonset();
```</p>

<p>While we&rsquo;re defining this as a jQuery plugin, we could have just as easily made an Ember component, an Angular directive, or a Backbone view.</p>

<p>We&rsquo;ve found that this level is often the best place for dealing with accessibility. By handling accessibility details in our reusable widgets and libraries we can code it once and benefit across our stack. New engineers can immediately start writing accessible code, and all engineers benefit from quick, accessible implementations of common patterns.</p>

<p>In this case, our code is almost all standard jQuery. This solution doesn&rsquo;t require us to manage focus or worry about keyboard navigation because buttons are already in the tab order, but often widget markup will need a <code>tabindex=-1</code> attribute and calls like <code>$('.item').focus()</code> to ensure that screen reader users aren&rsquo;t lost on the page.</p>

<p>Here&rsquo;s our component in action (it&rsquo;s easier to test with a screen reader if you pop out this example into its own page first):</p>

<p><a class="jsbin-embed" href="http://jsbin.com/OBoqALa/1/embed?output">JS Bin</a><script src="http://static.jsbin.com/js/embed.js"></script></p>

<h2>Testing accessibility</h2>

<p>If you&rsquo;re on a Mac, you already have the software you need to get started testing for accessibility. OSX ships with a screen reader, VoiceOver, that can be enabled in your System Preferences and activated by pressing Cmd-F5.</p>

<p>If you&rsquo;re on Windows, take a look at the free <a href="http://www.nvaccess.org/">NVDA</a> or, if you&rsquo;re doing professional development, the more widely used <a href="http://www.freedomscientific.com/products/fs/jaws-product-page.asp">JAWS</a>.</p>

<p>To ensure that everything we write is accessible, we test all new commits in VoiceOver and JAWS as well as in our supported browsers before merging to master. And while giving accessibility top priority alongside visual fidelity and layout initially slowed us down, we&rsquo;ve long since adjusted and now have  better code and a better product.</p>

<h2>Wrapping up</h2>

<p>Developing with accessibility in mind has been a great experience at Instructure. By starting with an eye to accessibility we&rsquo;ve been able to leverage WAI-ARIA tools to create rich, accessible content in an unobtrusive way.</p>

<h3>Additional resources</h3>

<p>To learn more about accessibility, take a look at the W3&rsquo;s <a href="http://www.w3.org/TR/wai-aria-practices">Authoring Practices</a> document. It covers additional topics like keyboard shortcuts, managing focus, and properly labeling content. The Illinois Center of Information Technology and Web Accessibility also have a great <a href="http://test.cita.uiuc.edu/aria/">collection of accessibility examples</a>.</p>
]]></content>
  </entry>
  
</feed>
