<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: EmberJS | Instructure Tech Blog]]></title>
  <link href="http://instructure.github.io/blog/categories/emberjs/atom.xml" rel="self"/>
  <link href="http://instructure.github.io/"/>
  <updated>2013-12-19T14:51:50-07:00</updated>
  <id>http://instructure.github.io/</id>
  <author>
    <name><![CDATA[Instructure]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Facebook React vs. Ember]]></title>
    <link href="http://instructure.github.io/blog/2013/12/17/facebook-react-vs-ember/"/>
    <updated>2013-12-17T08:54:00-07:00</updated>
    <id>http://instructure.github.io/blog/2013/12/17/facebook-react-vs-ember</id>
    <content type="html"><![CDATA[<p>We engineers at Instructure love <a href="http://www.emberjs.com">Ember</a>. We also love to learn about other frameworks and know which tools are the best for the job at hand. One of the newer frameworks to come out is React.</p>

<p><a href="http://facebook.github.io/react/">React</a> is Facebook&rsquo;s new JavaScript library for building user interfaces. I&rsquo;m excited to see another player in the game of front-end JS frameworks. When we have so much mind share going to a similar problem, we all win.</p>

<p>On the home page <a href="http://instructure.github.io/images/posts/react-website.png">(screenshot)</a>, there are a few examples of how React can be used. I thought it might be fun to show how each of these can be done using Ember.</p>

<!-- more -->


<h2>A Simple Component</h2>

<p>React components take data and return content which is to be displayed. Here&rsquo;s their example code:</p>

<p>
```js React
/<em>* @jsx React.DOM </em>/
var HelloMessage = React.createClass({
  render: function() {</p>

<pre><code>return &lt;div&gt;{'Hello ' + this.props.name}&lt;/div&gt;;
</code></pre>

<p>  }
});</p>

<p>React.renderComponent(<HelloMessage name="John" />, mountNode);
```
</p>

<p>Let&rsquo;s build this in Ember. For something as simple as this example, a <a href="http://emberjs.com/guides/templates/writing-helpers/">Handlebars Helper</a> will do the trick.</p>

<p>
```js Ember
Ember.Handlebars.helper(&lsquo;hello-message&rsquo;, function(name) {
  var escaped = Handlebars.Utils.escapeExpression(name);
  return new Handlebars.SafeString(&lsquo;<div>Hello &rsquo; + escaped + &lsquo;</div>&rsquo;);
});</p>

<p>{{{hello-message &ldquo;John&rdquo;}}}
```
</p>

<h3>Example:</h3>

<p><a class="jsbin-embed" href="http://jsbin.com/ecAJuxE/4/edit?html,js,output">Facebook React vs Ember</a><script src="http://static.jsbin.com/js/embed.js"></script></p>

<h2>A Stateful Component</h2>

<p>The stateful component example on the React page is cool. It tracks the elapsed time on a page (since refresh). Here&rsquo;s their code:</p>

<p>```js React
var Timer = React.createClass({
  getInitialState: function() {</p>

<pre><code>return {secondsElapsed: 0};
</code></pre>

<p>  },
  tick: function() {</p>

<pre><code>this.setState({secondsElapsed: this.state.secondsElapsed + 1});
</code></pre>

<p>  },
  componentDidMount: function() {</p>

<pre><code>this.interval = setInterval(this.tick, 1000);
</code></pre>

<p>  },
  componentWillUnmount: function() {</p>

<pre><code>clearInterval(this.interval);
</code></pre>

<p>  },
  render: function() {</p>

<pre><code>return React.DOM.div({},
  'Seconds Elapsed: ' + this.state.secondsElapsed
);
</code></pre>

<p>  }
});
```</p>

<p>Since we are maintaining state within the component itself, let&rsquo;s build it using an Ember Component.</p>

<p>```js Ember
App.TimeOnPageComponent = Em.Component.extend({
  secondsViewed: 0,</p>

<p>  // Increment the secondsViewed attribute
  tick: function() {</p>

<pre><code>this.incrementProperty('secondsViewed');
</code></pre>

<p>  },</p>

<p>  // Initiates timer when element is rendered
  startTimer: function() {</p>

<pre><code>this.interval = setInterval(this.tick.bind(this), 1000);
</code></pre>

<p>  }.on(&lsquo;didInsertElement&rsquo;),</p>

<p>  // Ensure that the timer stops when closed
  clearInterval: function() {</p>

<pre><code>clearInterval(this.interval);
</code></pre>

<p>  }.on(&lsquo;willDestroyElement&rsquo;)
});
```</p>

<h3>Example:</h3>

<p><a class="jsbin-embed" href="http://jsbin.com/AFepecE/5/embed?js,output">Facebook React vs Ember</a><script src="http://static.jsbin.com/js/embed.js"></script></p>

<h2>An Application</h2>

<p>The application example is a simple todo list which has a TodoList class (for rendering content) and a TodoApp class (maintains the state and renders the layout). Here&rsquo;s the code:</p>

<p>```js React
/<em>* @jsx React.DOM </em>/
var TodoList = React.createClass({
  render: function() {</p>

<pre><code>var createItem = function(itemText) {
  return &lt;li&gt;{itemText}&lt;/li&gt;;
};
return &lt;ul&gt;{this.props.items.map(createItem)}&lt;/ul&gt;;
</code></pre>

<p>  }
});
var TodoApp = React.createClass({
  getInitialState: function() {</p>

<pre><code>return {items: [], text: ''};
</code></pre>

<p>  },
  onChange: function(e) {</p>

<pre><code>this.setState({text: e.target.value});
</code></pre>

<p>  },
  handleSubmit: function(e) {</p>

<pre><code>e.preventDefault();
var nextItems = this.state.items.concat([this.state.text]);
var nextText = '';
this.setState({items: nextItems, text: nextText});
</code></pre>

<p>  },
  render: function() {</p>

<pre><code>return (
  &lt;div&gt;
    &lt;h3&gt;TODO&lt;/h3&gt;
    &lt;TodoList items={this.state.items} /&gt;
    &lt;form onSubmit={this.handleSubmit}&gt;
      &lt;input onChange={this.onChange} value={this.state.text} /&gt;
      &lt;button&gt;{'Add #' + (this.state.items.length + 1)}&lt;/button&gt;
    &lt;/form&gt;
  &lt;/div&gt;
);
</code></pre>

<p>  }
});
React.renderComponent(<TodoApp />, mountNode);
```</p>

<p>When writing this in Ember, we would use both a controller and a handlebars template. The controller will maintain the state and respond to user interaction and the template will display the form and list.</p>

<p>```js Ember (controller)
App.ApplicationController = Em.ArrayController.extend({
  content: [],</p>

<p>  btnLabel: function() {</p>

<pre><code>return "Add #" + (this.get('content.length') + 1);
</code></pre>

<p>  }.property(&lsquo;content.length&rsquo;),</p>

<p>  actions: {</p>

<pre><code>handleSubmit: function() {
  this.get('content').pushObject(this.get('text'));
  this.set('text', '');
}
</code></pre>

<p>  }
});
```</p>

<p>
```html Ember (template)</p>

<div>
  <h3>TODO</h3>
  <ul>
  {{#each content}}
    <li>{{this}}</li>
  {{/each}}
  </ul>

  <form {{action "handleSubmit" on="submit"}}>
    {{input value=text}}
    <button type="submit">{{btnLabel}}</button>
  </form>
</div>


<p>```
</p>

<h3>Example:</h3>

<p><a class="jsbin-embed" href="http://jsbin.com/OkOLEze/3/embed?html,js,output">Facebook React vs Ember</a><script src="http://static.jsbin.com/js/embed.js"></script></p>

<h2>A Component Using External Plugins</h2>

<p>This example on the React website under <em>A Component Using External Plugins</em> is a great example of encapsulating functionality.</p>

<p>
```js React
/<em>* @jsx React.DOM </em>/</p>

<p>var converter = new Showdown.converter();</p>

<p>var MarkdownEditor = React.createClass({
  getInitialState: function() {</p>

<pre><code>return {value: 'Type some *markdown* here!'};
</code></pre>

<p>  },
  handleChange: function() {</p>

<pre><code>this.setState({value: this.refs.textarea.getDOMNode().value});
</code></pre>

<p>  },
  render: function() {</p>

<pre><code>return (
  &lt;div className="MarkdownEditor"&gt;
    &lt;h3&gt;Input&lt;/h3&gt;
    &lt;textarea
      onChange={this.handleChange}
      ref="textarea"
      defaultValue={this.state.value} /&gt;
    &lt;h3&gt;Output&lt;/h3&gt;
    &lt;div
      className="content"
      dangerouslySetInnerHTML={{
        __html: converter.makeHtml(this.state.value)
      }}
    /&gt;
  &lt;/div&gt;
);
</code></pre>

<p>  }
});</p>

<p>React.renderComponent(<MarkdownEditor />, mountNode);
```
</p>

<p>The caveat to this example is that it assumes that the <a href="https://github.com/coreyti/showdown">showdown</a> library is already loaded. In our Ember example, note that the library is loaded in the <em>head</em>.</p>

<p>```js Ember (controller)
App.ApplicationRoute = Em.Route.extend({
  model: function() {</p>

<pre><code>return { value: 'Type some *markdown* here!' };
</code></pre>

<p>  }
});</p>

<p>Em.Handlebars.registerBoundHelper(&lsquo;markdown&rsquo;, function(str) {
  var converter = new Showdown.converter();
  var html = converter.makeHtml(str || &lsquo;&rsquo;);
  return new Handlebars.SafeString(html);
});
```</p>

<p>
```html Ember (template)</p>

<div class="container">
  <h3>Input</h3>
  {{textarea value=value class="form-control"}}
  <h3>Output</h3>
  {{markdown value}}
</div>


<p>```
</p>

<p>I added Twitter Bootstrap to this example for cleanliness.</p>

<p><a class="jsbin-embed" href="http://jsbin.com/eyOlOFI/7/embed?js,output">Facebook React vs Ember</a><script src="http://static.jsbin.com/js/embed.js"></script></p>

<p>I haven&rsquo;t spent enough time with React to be able to convert the <a href="http://www.emberjs.com">Ember examples</a> to it, but I would love to see someone do that for a better comparison.</p>

<p><div class="about-box">
  <a href="http://coderberry.me"><img src="https://en.gravatar.com/userimage/2313670/31b6875622886c41f150245d58acbd0e.jpg?size=100" class="avatar" align="left" /></a>
  <p>
    <a href="http://coderberry.me" class="author-name">Eric Berry</a> is a software engineer at <a href="http://www.instructure.com">Instructure</a> and loves giving back to the community via blog posts and meetups. He was a co-founder of <a href="http://h71028.www7.hp.com/enterprise/cache/504712-0-0-225-121.html">ShareAPhoto, Ltd</a>, a European online photo sharing company which was acquired by Hewlett-Packard in 2006. He was the author of <a href="http://www.amazon.com/Rails-Pocket-Reference-OReilly/dp/0596520700">Rails Pocket Reference</a> (published 2008 – O’Reilly). He spear-headed <a href="http://teachmetocode.com/screencasts/page/9/">TeachMeToCode.com</a>, a popular on-demand screencasting website dedicated to helping others learn how to program.
  </p>
</div></p>
]]></content>
  </entry>
  
</feed>
